# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Company {
  address: String!
  createdAt: DateTime!
  id: ID!
  imgUrl: String!
  name: String!
  nationalId: String!
  phoneNumber: [PhoneNumber!]!
  products: [Product!]
  updatedAt: DateTime!
}

input CompanyInputType {
  address: String!
  imgUrl: String!
  name: String!
  nationalId: String!
  phoneNumber: [PhoneNumberInputType!]!
  products: [ProductInputType!]
}

input CompanyPaginationInput {
  page: Int! = 1
}

type CompanyPaginationOutput {
  error: String
  items: [Company!]
  ok: Boolean!
  totalPages: Float
  totalResults: Float
}

input CreateAccountInput {
  email: String!
  password: String!
  role: UserRole!
  username: String!
}

type CreateAccountOutput {
  error: String
  ok: Boolean!
}

input CreateCompanyInput {
  address: String!
  imgUrl: String!
  name: String!
  nationalId: String!
  phoneNumber: [PhoneNumberInputType!]!
}

type CreateCompanyOutput {
  error: String
  item: Company
  ok: Boolean!
}

input CreateProductInput {
  companyId: ID!
  imgUrl: String!
  name: String!
  price: Float!
  stock: ProductStockInpuType!
}

type CreateProductOutput {
  error: String
  item: Product
  ok: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LogInInput {
  email: String!
  password: String!
}

type LoginOutput {
  error: String
  ok: Boolean!
  token: String
}

type Mutation {
  createAccount(input: CreateAccountInput!): CreateAccountOutput!
  createCompany(input: CreateCompanyInput!): CreateCompanyOutput!
  createProduct(input: CreateProductInput!): CreateProductOutput!
  login(input: LogInInput!): LoginOutput!
}

type PhoneNumber {
  countryCode: String!
  ext: String
  number: String!
}

input PhoneNumberInputType {
  countryCode: String!
  ext: String
  number: String!
}

type Product {
  company: Company!
  createdAt: DateTime!
  id: ID!
  imgUrl: String!
  name: String!
  price: Float!
  stock: ProductStock!
  updatedAt: DateTime!
}

input ProductInputType {
  company: CompanyInputType!
  imgUrl: String!
  name: String!
  price: Float!
  stock: ProductStockInpuType!
}

input ProductPaginationInput {
  page: Int! = 1
}

type ProductPaginationOutput {
  error: String
  items: [Product!]
  ok: Boolean!
  totalPages: Float
  totalResults: Float
}

type ProductStock {
  available: Float!
  max: Float!
  min: Float!
  reservation: Float!
  transit: Float!
}

input ProductStockInpuType {
  available: Float!
  max: Float!
  min: Float!
  reservation: Float!
  transit: Float!
}

type Query {
  listCompanies(input: CompanyPaginationInput!): CompanyPaginationOutput!
  listProducts(input: ProductPaginationInput!): ProductPaginationOutput!
  me: User!
}

type User {
  createdAt: DateTime!
  email: String!
  id: ID!
  password: String!
  role: UserRole!
  updatedAt: DateTime!
  username: String!
  verified: Boolean!
}

enum UserRole {
  ADMIN
  CUSTOMER
}